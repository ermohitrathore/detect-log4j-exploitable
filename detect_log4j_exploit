#!/bin/bash

# List all the java process
proc=$(ps -eo pid,command 2>/dev/null | grep [j]ava | awk '{print $1}')

# Added flag variable to detect whether code is exploitable or not
flag=false

# Looping each java process
for p in $proc; do

   # Check for log4j-core jar file
   log4j_jar=$(ls -l /proc/"$p"/fd/ 2>/dev/null| grep "log4j-core.*jar" | awk -F '->' '{print $2}' | sed 's/^[[:blank:]]*//g')
   
   # check if log4j-core<version>.jar file exist or not on the target
   if [ -f "$log4j_jar" ]; then
   
      # Fetching file to get log4j version information
      pom_data=$(zip -sf "$log4j_jar" 2>/dev/null | grep "pom.xml"| sed 's/^[[:blank:]]*//g')
      
      # Fetch for JndiLookup.class, which has this vulnerability 
      jndi_class=$(zip -sf "$log4j_jar" 2>/dev/null | grep "JndiLookup.class"| sed 's/^[[:blank:]]*//g')
      
      # Check if JndiLookup.class exist
      if [ -n "$jndi_class" ]; then
      
          # check for the version information of log4j
          exp=$(unzip -p $log4j_jar $pom_data | grep -Pzo "<artifactId>log4j</artifactId>\s*<version>.+?</version>" | grep "version" | grep -v ">(2.16.0|2.12.2|2.0-beta[1-8]|2.0-alpha)<")
          if [ -n "$exp" ]; then
          
              # if the flag is true means, the specific process is exploitable
              flag=true
              echo "Exploitable Pid: $p"
          fi
      fi
   fi
done


echo "Exploitable: $flag"
